{"version":3,"sources":["Components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","im","ingre","className","map","ingred","src","alt","App","useState","string","setstring","save","setsave","recipes","setrecipe","useEffect","getRecipies","a","fetch","responce","json","result","hits","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","recipe","label","image","ingredientLines","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAmBeA,MAjBf,YAA4C,IAA3BC,EAA0B,EAA1BA,MAAMC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,GAAGC,EAAQ,EAARA,MAC/B,OACI,yBAAKC,UAAU,UACX,4BAAKJ,GAAW,6BAChB,4BAEQG,EAAME,KAAI,SAAAC,GAAM,OACZ,4BAAKA,OAIjB,2BAAG,yCAAeL,IAAiB,6BACnC,yBAAMM,IAAKL,EAAIM,IAAI,OC2ChBC,MApDf,WAEE,IAFa,EAKeC,mBAAS,IALxB,mBAKNC,EALM,KAKEC,EALF,OAMWF,mBAAS,SANpB,mBAMNG,EANM,KAMAC,EANA,OAQgBJ,mBAAS,IARzB,mBAQNK,EARM,KAQGC,EARH,KAUbC,qBAAU,WACRC,MACC,CAACL,IAEJ,IAAMK,EAAW,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCP,EAApC,mBAblB,WAakB,oBAZjB,qCAWM,cACXQ,EADW,gBAEIA,EAASC,OAFb,OAEXC,EAFW,OAGjBP,EAAUO,EAAOC,MACjBC,QAAQC,IAAIH,GAJK,2CAAH,qDAkBjB,OACE,yBAAKnB,UAAU,OAEd,0BAAMuB,SATM,SAACC,GACdA,EAAEC,iBACFf,EAAQH,GACRC,EAAU,KAMeR,UAAU,WAEnC,2BAAO0B,KAAK,OAAOC,YAAY,cAAcC,MAAOrB,EAAQsB,SAhBzC,SAAAL,GACnBhB,EAAUgB,EAAEM,OAAOF,QAeiE5B,UAAU,gBAC9F,4BAAQ0B,KAAK,SAAS1B,UAAU,cAAhC,WAGC,yBAAKA,UAAU,WAEbW,EAAQV,KAAI,SAAA8B,GAAM,OACjB,kBAAC,EAAD,CAAQnC,MAAOmC,EAAOA,OAAOC,MAAOnC,SAAUkC,EAAOA,OAAOlC,SAAUC,GAAIiC,EAAOA,OAAOE,MAAOlC,MAAOgC,EAAOA,OAAOG,gBAAiBC,IAAKJ,EAAOA,OAAOC,cCrC5II,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bb7ea908.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Recipe({title,calories,im,ingre}) {\r\n    return (\r\n        <div className=\"div-cl\" >\r\n            <h1>{title}</h1><br/>\r\n            <ol>\r\n                {\r\n                    ingre.map(ingred =>(\r\n                        <li>{ingred}</li>\r\n                    ))\r\n                }\r\n            </ol>\r\n            <p><b>Calories = {calories}</b></p><br/>\r\n            <img  src={im} alt=\"\" ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React , {useEffect,useState} from 'react';\n\nimport './App.css';\nimport Recipe from './Components/Recipe';\n\nfunction App() {\n\n  const App_id=\"f876d448\";\n  const App_key=\"c2c948d778349ab17956cba5c8a568c0\";\n\n  const [string, setstring] = useState(\"\");\n  const [save, setsave] = useState(\"apple\") \n\n  const [recipes, setrecipe] = useState([])\n\n  useEffect(() => {\n    getRecipies();\n  }, [save] );\n\n  const getRecipies = async () =>{\n     const responce = await fetch(`https://api.edamam.com/search?q=${save}&app_id=${App_id}&app_key=${App_key}`);\n     const result = await responce.json();\n     setrecipe(result.hits);\n     console.log(result);\n  }\n\n  const updateString = e =>{\n    setstring(e.target.value);\n    // console.log(string)\n  }\n\n  const storeW = (e) =>{\n    e.preventDefault();\n    setsave(string); \n    setstring(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n\n     <form onSubmit={storeW} className=\"form-fr\">\n\n    <input type=\"text\" placeholder=\"Search Here\" value={string} onChange={updateString} className=\"textbox1-fr\"></input>\n    <button type=\"submit\" className=\"button1-fr\">Search</button>\n\n     </form>\n     <div className=\"div-app\">\n     {\n       recipes.map(recipe => (\n        <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} im={recipe.recipe.image} ingre={recipe.recipe.ingredientLines} key={recipe.recipe.label}/>\n       ))\n     }\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}